#+TITLE: Notes on Type Driven Development With Idris
#+EMAIL: balaji AT balajisivaraman DOT com
#+AUTHOR: Balaji Sivaraman
#+LANGUAGE: en
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{amssymb, amsmath, mathtools, fullpage, fontspec}
#+LATEX_HEADER: \renewcommand*{\familydefault}{\sfdefault}
#+LATEX_HEADER: \setsansfont{Verdana}
#+LATEX: \newpage

* Chapter 1 - Overview
** Types serve several important functions
   1. for a machine, types describe how bit patterns in memory are to be interpreted
   2. for a compiler or interpreter , types help ensure that bit patterns are interpreted
   consistently when a program runs
   3. for a programmer, types help name and organise concepts, aiding documentation and
   supporting interactive editing environments
** First define the data types, then for each function:
   1. Write the input and output types
   2. Define the function, using the structure of the input types to guide the implementation
   3. Refine and edit the type and function definition as necessary
** We define data types that make the problem domain explicit in the code itself.
   1. For instance, defining a matrix data type that includes the dimensions of the matrix as well.
   2. Why cannot we do this in a non-dependently typed language?
   3. Developing and testing concurrent programs is notoriously difficult.
   If we can describe the relationships between processes as types, we can guarantee that a concurrent program that typechecks will work correctly.
** Type Drive Development is an iterative process of "Type. Define. Refine."
** A dependent type is a type, like Matrix, that is calculated from (i.e. depends on) some other values.
   1. List type in some langs: We can make this more precise by parameterising over the element type: a generic "List of
   Strings" is more precise than simply a "List" and differs from a "List of Integers". We
   can be more precise still with a dependent type: a "List of 4 Strings" differs from a "List
   of 3 Strings".
** Assume that Bounded n represents a number between zero and n - 1. Input types: Bounded n, Vect n elem.
   - Still doesn't seem very safe since Bounded includes 0.
** Totality - Idris doesn't solve the halting problem. It simply identifies a large class of functions that are definitely total.
** A first-class language construct is one which is treated as a value, with no syntactic restrictions on where it can be used. In other words, a first-class construct can be passed to functions, returned from functions, stored in variables, and so on.
* Chapter 2 - Getting Started With Idris
** All tuples in Idris are represented as nested pairs. So (1, 2, 3, 4) is the same as (1, (2, (3, 4)))
* Chapter 3 - Interactive Development with Types
**  For the moment, itâ€™s sufficient to know that Idris will consider a function total if
     - It has clauses that cover all possible well-typed inputs
     - All recursive calls converge on a base case
** Idris processes files top to bottom and expects definitions to appear before they are used. If we want two functions to use each other, they must be defined in a mutual block.
** Because types are first class, type-level variables can also be brought into scope and used in definitions. These type-level variables are referred to as implicit arguments to the functions reverse and append.
** Type-level variables are implicit arguments to functions, which can be brought into scope and used like any other arguments by enclosing them in braces {}.
* Chapter 4 - User Defined Data Types
** We'll classify types into five basic groups, although they are all defined with the same syntax:
   1. Enumerations: types defined by giving the possible values directly
   2. Union Types: enumerated types which carry additional data with each value
   3. Recursive Types: union types which are defined in terms of themselves
   4. Generic Types: types which are parameterised over some other types
   5. Dependent Types: types which are computed from some other value
** %name directives can be given to Idris to choose more descriptive names for a type.
** Dependent data types are sometimes called families of types since we define multiple related types at the same time.
   - In our vehicle example, we defined pedal and petrol vehicles at the same time.
   - The power source is an index of the Vehicle family, since it tells us exactly what vehicle type we mean.
** Vect defines a family of types, and we say that a is by its Vect indexed length and parameterised by an element type.
** The distinction between parameters and indices is:
   - A parameter is unchanged across the entire structure. In this case, element every of the vector has the same type
   - An index may change across a structure. In this case, every sub-vector has a different length.
* Chapter 5 - Interactive Programs: Input and Output Processing
** Dependent types allows us to state assumptions about the form of inputs to a function in its type, and guarantees about the form of its output.
** Idris checks that whenever the function is called, the arguments satisfy the assumption, and that the definition of the function satisfies the guarantee.
** When a program reads data from some external source, it can't make any assumptions about the form of that data. Rather, the program has to that the data is of the check necessary form. *The type of a function tells us exactly what we need to check in order to evaluate it safely.*
** The types of the pure parts of programs tell us what we need to check in the interactive parts, and how the type system guides us towards the parts where error checking is necessary.
** A dependent pair is a more expressive form of tuples, where the of the type second element in a pair can be computed from the of the first element.
   anyVect : (n : Nat ** Vect n String)
   anyVect = (3 ** ["Rod", "Jane", "Freddy"])
